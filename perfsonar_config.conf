# At the top level are elements specific to the overall Mesh. This includes a
# description of the 'mesh', the admins for the mesh, the organizations
# involved in the mesh, and the tests that the meshes perform.

# A human-readable description of the overall mesh
description     U-M Access Layer Perfsonar Mesh

# The overall mesh administrators (i.e. who one should contact if problems are
# seen with the mesh, etc).
<administrator>
  name       Pradip Patel
  email      ppatel@umich.edu
</administrator>

# Each mesh has one or more "organization" blocks. This allows encapsulating
# the administrators, sites, MAs, etc that are specific to the organization. In
# this example organization, all the data is stored on the hosts on which it is
# collected which is the norm for Toolkit instances.
<organization>
  # A human-readable description of the organization
  description    University of Michigan

  # Instead of having each host have its own measurement archives. It is
  # possible to have a central server act as a measurement archive for all the
  # hosts in an organization.
      <measurement_archive>
        type        traceroute
        read_url    http://141.211.54.140/esmond/perfsonar/archive/
        write_url   http://141.211.54.140/esmond/perfsonar/archive/
      </measurement_archive>

      <measurement_archive>
        type        perfsonarbuoy/owamp
        read_url    http://141.211.54.140/esmond/perfsonar/archive/
        write_url   http://141.211.54.140/esmond/perfsonar/archive/
      </measurement_archive>

      <measurement_archive>
        type        perfsonarbuoy/bwctl
        read_url    http://141.211.54.140/esmond/perfsonar/archive/
        write_url   http://141.211.54.140/esmond/perfsonar/archive/
      </measurement_archive>

      <measurement_archive>
        type       pinger
        read_url   http://141.211.54.140/esmond/perfsonar/archive/
        write_url  http://141.211.54.140/esmond/perfsonar/archive/
      </measurement_archive>

  # There can be one or more 'site' blocks. Each 'site' block corresponds to a
  # logical site in the organization which may contain one or more hosts.
  # Elements in the 'site' block apply to all the 'host' blocks contained
  # within them, and inherit the properties from the 'organization'.
  <site>
    ## A human-readable description of where the site is located (e.g. a city or state)
    <location>
      city     Ann Arbor
      state    MI
      # The latitude and longitude where the site is located
      latitude   42.275883 
      longitude  -83.742831
    </location>

    # There can be one or more 'host' blocks. Each 'host' block corresponds to
    # a single host at a site.
    <host>
      # An optional human-readable description of the host
      description    ANGL node (psrpi1)
      address        198.108.9.253
    </host>
    <host>
      # An optional human-readable description of the host
      description    ARTARC node (psrpi2)
      address        198.108.9.237
    </host>
    <host>
      # An optional human-readable description of the host
      description    MRKL node (psrpi3)
      address        198.108.9.221
    </host>
    <host>
      # An optional human-readable description of the host
      description    iLab perfsonar 4.0 MA
      address        198.111.226.51
    </host>
    <host>
      # An optional human-readable description of the host
      description    iLab 10gbe node
      address        198.111.227.235
    </host>
  </site>

</organization>

# There can be one or more test_spec blocks. Each test_spec block represents a
# test specification, i.e. a test type, along with the parameters for the test.
# The test_spec's *must* have an 'id' field which gets used later to identify
# them.
<test_spec bwctl_1h_tcp_test>
  # Define a test spec for testing achievable bandwidth once every 4 hours

  type              perfsonarbuoy/bwctl  # Perform a bwctl test (i.e. achievable bandwidth)
  tool              bwctl/iperf3          # Use 'iperf' to do the bandwidh test
  protocol          tcp                  # Run a TCP bandwidth test
  interval          3300                # Run the test every 55 min
  duration          20                   # Perform a 20 second test (+ 10 sec omit)
  force_bidirectional 1                  # do bidirectional test
  random_start_percentage 25             # randomize start time
  omit_interval     10                   # ignore first 10 seconds 
</test_spec>

<test_spec bwctl_1h_udp_test>
  # Define a test spec for testing UDP bandwidth once every 6 hours

  type              perfsonarbuoy/bwctl
  tool              bwctl/iperf3
  protocol          udp                  # Run a UDP bandwidth test
  interval          3600                # Run the test every 1 hour
  duration          10                   # Perform a 10 second test (+10 sec omit)
  random_start_percentage 45             # randomize start time
  force_bidirectional 1                  # do bidirectional test
  omit_interval     10                   # ignore first 10 seconds
  udp_bandwidth     200000000             # Perform a 200 Mbps test
</test_spec>

<test_spec owamp_test>
  # Define a test spec for doing jitter, loss and latency testing

  type              perfsonarbuoy/owamp  # Perform a constant low-bandwidth OWAMP test
  packet_interval   0.1                 # Send 10 packets every second (i.e. pause 0.1 seconds between each packet)
  loss_threshold    10                   # Wait no more than 10 seconds for a response
  session_count     10800                # Refresh the test every half hour (once every 18000 packets)
  sample_count      600                 # Send results back every 30 seconds (once every 300 packets)
  packet_padding    0                    # The size of the packets (not including the IP/UDP headers)
  bucket_width      0.0001                # The granularity of the measurements
  force_bidirectional 1                  # do bidirectional test
</test_spec>

<test_spec traceroute_test>
  # Define a test spec for running traceroute tests every 10 minutes

  type              traceroute           # Perform a traceroute test
  test_interval     600                  # Run the test every 10 minutes
  timeout           30                   # Wait 30 seconds 
  waittime          5                    # Number of seconds to wait for a response before assuming its lost
</test_spec>

# There can be one or more 'group' blocks. These contain a list of hosts that
# will be used in a test. 
<group owamp_hosts>
  # A group type 'mesh' means that all hosts in the list will test to all other
  # hosts in the list. The other available options is 'star' configuration
  # detailed below.
  type              mesh

  # The members contain a list of addresses that will be used in the tests.
  # These *must* correspond to addresses in host blocks above.
  member           198.108.9.221
  member           198.108.9.237
  member           198.108.9.253
  member           198.111.226.51
</group>

<group bwctl_hosts>
  type              mesh
  member           198.108.9.221
  member           198.108.9.237
  member           198.108.9.253
  member           198.111.226.51
</group>

# There can be one or more 'test' blocks that represent tests that the mesh
# should be performing. These combine the group elements defined above with
# test parameters defined above.

<test>
  description       TCP BWCTL Test Between BWCTL Hosts
  group             bwctl_hosts
  test_spec         bwctl_1h_tcp_test
</test>

<test>
  description       UDP BWCTL Test Between BWCTL Hosts
  group             bwctl_hosts
  test_spec         bwctl_1h_udp_test
</test>

<test>
  description       OWAMP Test Between OWAMP Hosts
  group             owamp_hosts
  test_spec         owamp_test
</test>
